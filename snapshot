#!/bin/bash

# This files is sourcing backup script (snap files)
# See README.md for parameters and usage example

# You shouldn't have to change anything in this script which is for internal use

usage ()
{
    echo "Usage: $(basename $0) snapfile.snap [options]"
    echo "Options: -d => dry run for rsync (rotation is done)"
}

if [ $# -lt 1 ] ; then
    usage
    exit 1
fi

SNAPFILE=$1
DRYRUN=0
MAIL_ADDRESS=""

if [ $# -eq 2 ] ; then
    if [ "m$2" = "m-d" ] ; then
	echo "Dry run for rsync (rotation is done)"
	DRYRUN=1
    else
	usage
    fi
fi

# Memorize if snaps have been rotated 
snap_rotated=0

# set io prio to idle
which -s ionice
if [[ $? -eq 0 ]]; then
    ionice -c3 -p$$ 
fi

# check that INIT is called
initialized=0


MAIL ()
{
    which -s mutt
    MAIL_COMMAND="mail"
    if [[ $? -eq 0 ]]; then
        MAIL_COMMAND="mutt" 
    fi
    $MAIL_COMMAND -s "$1" "$MAIL_ADDRESS"
    #cat
}

fatal ()
{
    echo $1
    echo -e "ERROR snapshot of $BACKUPED_HOST `date +%Y%m%d`\n$1" | MAIL 
    touch $ERRORFILE
    exit 1
}

logcmd ()
{
n    echo $* >&2
    $*
}

rotate_snapshots ()
{
  SD=$1

  for version in 000 001 002 003 004 005 010 015 020 025 030 060 090 120 150 180
  do [ -d $SD.$version ] || mkdir -p $SD.$version
  done

  echo Rotating snapshots

  ret=0

  #rotation every month
  if [ $(date "+%-d") -eq 27 ]; then
	  logcmd rm -rf $SD.180 &&\
      mv $SD.150 $SD.180 &&\
      mv $SD.120 $SD.150 &&\
      mv $SD.090 $SD.120 &&\
      mv $SD.060 $SD.090 &&\
      logcmd cp -alu $SD.030 $SD.060
      ret=$(($?+$ret))
  fi

  #rotation every 5 days
  if [ $(($(date "+%-d")%5)) -eq 2 ]; then
	  logcmd rm -rf $SD.030 &&\
      mv $SD.025 $SD.030 &&\
      mv $SD.020 $SD.025 &&\
      mv $SD.015 $SD.020 &&\
      mv $SD.010 $SD.015 &&\
      logcmd cp -alu $SD.005 $SD.010
      ret=$(($?+$ret))
  fi

  #rotation every day (one lauch per day)
  logcmd rm -rf $SD.005 &&\
  mv $SD.004 $SD.005 &&\
  mv $SD.003 $SD.004 &&\
  mv $SD.002 $SD.003 &&\
  mv $SD.001 $SD.002 &&\
  logcmd cp -alu $SD.000 $SD.001

  ret=$(($?+$ret))

  if [ $ret -eq 0 ] ; then
      echo Rotation OK
  else
      echo Error during snap rotation
	  touch $ERRORFILE
      exit 1
  fi
  snap_rotated=1
}

test_remote_host ()
{
    SSH="ssh $SSH_OPTIONS -x $1@$2"
    if [ "m$2" != "mlocalhost" ]; then
        $SSH -Y date
        ret=$?
        echo
        if [ 0 -eq $ret ] ; then
	    echo connection to $2 OK
        else
	    fatal "$0  : Error, server $2 unreachable"
        fi
    fi
}

INIT ()
{
  [ "m$DEST_DIR" == "m" ] && fatal "Please define DEST_DIR"
  [ "m$MAIL_ADDRESS" == "m" ] && fatal "Please define MAIL_ADDRESS"
  [ "m$SOURCE_HOST" == "m" ] && SOURCE_HOST=$BACKUPED_HOST

  [ -f  $ERRORFILE ] && rm -f $ERRORFILE 

  if [ "m$DEST_HOST" != "mlocalhost" ]; then
      fatal backup to distant host is not supportwith this version
  fi
  
  [ -d $DEST_DIR ] || fatal "DEST_DIR $DEST_DIR doesnt exist"
  [ -d $DEST_DIR/$BACKUPED_HOST ] || mkdir -p $DEST_DIR/$BACKUPED_HOST

  if [ "m$SOURCE_HOST" != "mlocalhost" ]; then
      test_remote_host $DEST_USER $DEST_HOST
  fi

  DEST=$DEST_DIR/$BACKUPED_HOST/snapshot.000
  
  rotate_snapshots $DEST_DIR/$BACKUPED_HOST/snapshot
  echo "$(date "+%y%m%d-%H%M") Starting snapshot backup of $BACKUPED_HOST (on $(hostname))"

  initialized=1
}

RSYNC () {
  if [ $snap_rotated -ne 1 ] ; then
	  fatal "INIT has not been called"
  fi
  TMPFILE=/tmp/$$-RSYNC-$BACKUPED_HOST
  if [ $DRYRUN -ne 1 ] ; then
      echo "-- Running rsync  --perms --delete $RSYNC_OPTIONS --max-delete=5000 \
--chmod=u+rw,o-w -av -e \"ssh $SSH_OPTIONS \" $*"
      nice -n 19 rsync --perms --delete $RSYNC_OPTIONS --max-delete=5000 \
               --chmod=u+rw,o-w -av -e "ssh $SSH_OPTIONS " \
               $* 2>&1 > $TMPFILE
      
      if [ ${PIPESTATUS[0]} -ne 0 ] ; then
	  touch $ERRORFILE
	  cat $TMPFILE >> $ERRORFILE
      fi
      [ "$VERBOSE" == "true" ] && cat $TMPFILE 
      rm -f $TMPFILE
  else
      echo Would run rsync $*
  fi  
}

function dobackup
{
    if [ $initialized -ne 1 ] ; then
	INIT
    fi
    if [ $initialized -ne 1 ] ; then
    exit 1
    fi
    
    SOURCE=$1
    shift
    DEST_SUBDIR=$1
    shift 
    export OPTIONS=$*
    
    if [ "m$SOURCE_HOST" == "mlocalhost" ]; then
        SRC=$SOURCE
    else
        SRC=$SOURCE_USER@$SOURCE_HOST:$SOURCE
    fi
    DST=$DEST/$DEST_SUBDIR 

    echo
    echo "*** $(date "+%y%m%d-%H%M") Backuping $SRC to $DEST/$DEST_SUBDIR (on $(hostname))"
    echo
    [ -d $DST ] || mkdir -p $DST
    RSYNC $OPTIONS $SRC $DST 
}

commands=""
# Create the call stack, dobackup do the actual backup
backup ()
{
    if [ "q$commands" != "q" ]; then
	commands="$commands\n$*"
    else	
	commands="$*"
    fi
}

# fill the backup PATH queue
source $SNAPFILE

#export stuff for the sub process
export DEST_HOST
export DEST_DIR
export MAIL_ADDRESS
export SOURCE_USER
export SOURCE_HOST
export commands
export VERBOSE
export RSYNC_OPTIONS

export BACKUPED_HOST=$(basename $SNAPFILE .snap)

if [ "m$SOURCE_HOST" != "mlocalhost" ]; then
    [ "m$SSH_KEY" == "m" ] && SSH_KEY=$HOME/.ssh/id_dsa_backup-$BACKUPED_HOST
    export SSH_KEY
    SSH_OPTIONS="-i $SSH_KEY"
    [ "m$SSH_PORT" != "m" ] && SSH_OPTIONS="$SSH_OPTIONS -p $SSH_PORT"
    export SSH_OPTIONS
fi

export ERRORFILE=/tmp/RSYNC-$BACKUPED_HOST-ERROR
   

# do the backup in a subprocess to get stdout 
(

INIT

# run all schedule backups
echo -e $commands | while read command; do 
    dobackup $command
done

#create snapshot list
rm -f $DEST/date
LC_ALL=C date > $DEST/date
cd $DEST_DIR/$BACKUPED_HOST
echo Snapshot list > snaplist.txt
for dir in $(find . -name snapshot\* -maxdepth 1 -type d); do
  [ -r $dir/date ] && (echo "$(basename $dir) backup date : $(cat $dir/date)" >> snaplist.txt)
done
   
) >> /tmp/$$-SNAPSHOT-$BACKUPED_HOST.log


HOSTNAME=$(hostname)

if [ -f "$ERRORFILE" ]; then
    MAIL_SUBJECT="[snapshot] (ERROR) $BACKUPED_HOST (on $HOSTNAME) $(date "+%y%m%d-%H%M")"
else
    MAIL_SUBJECT="[snapshot] (OK) $BACKUPED_HOST (on $HOSTNAME) $(date "+%y%m%d-%H%M")"
fi

(

if [ ! -f "$ERRORFILE" ]; then
echo "Snapshot backup of $BACKUPED_HOST completed with no errors"
else
echo "ERROR Snapshot backup of $BACKUPED_HOST completed WITH ERRORS"
fi

echo

# Display some stats
echo -- Disk space available $DEST_DIR
df -h $DEST_DIR
echo
echo -- Last snapshot disk space $DEST_DIR/$BACKUPED_HOST/snapshot.000
du -hs $DEST_DIR/$BACKUPED_HOST/snapshot.000/*
echo
cat $DEST_DIR/$BACKUPED_HOST/snaplist.txt

echo
echo ----------------------------------------
echo
echo Detailled log
echo -------------

cat  /tmp/$$-SNAPSHOT-$BACKUPED_HOST.log 

if [ -f "$ERRORFILE" ]; then
    echo
    echo Error log
    echo -------------
    cat  $ERRORFILE
fi

)| MAIL "$MAIL_SUBJECT"
