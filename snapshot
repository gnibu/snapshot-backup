#!/bin/bash -x

# This files is sourcing backup script (snap files)
# See exemple.org.snap for parameters and usage example

# Backup when launch every day will keep snapshots from approx
# 000 001 002 003 004 005 010 015 020 025 030 060 090 120 150 180 days ago

# You should'nt have to change anything in this script which is for internal use

# ssh configuration: for more security,  you can add something like the line after
# before the key used in your .ssh/authorized_key2 file
#  command="echo $SSH_ORIGINAL_COMMAND >> ~/ssh_commands.log ; echo $SSH_ORIGINAL_COMMAND | egrep -q '^(rsync --server --sender -vlogDtpr . /(var|etc|root|home)|date)$' &&  eval $SSH_ORIGINAL_COMMAND",no-port-forwarding,no-X11-forwarding,no-agent-forwarding,from="snapshoting.host.org" 

usage ()
{
	echo "Usage: $(basename $0) snapfile.snap [options]"
	echo "Options: -d => dry run for rsync (rotation is done)"
}

if [ $# -lt 1 ] ; then
	usage
	exit 1
fi

SNAPFILE=$1
DRYRUN=0
if [ $# -eq 2 ] ; then
	if [ "m$2" = "m-d" ] ; then
		echo "Dry run for rsync (rotation is done)"
		DRYRUN=1
	else
		usage
	fi
fi

# Memorize if snaps have been rotated 
snap_rotated=0

# set io prio to idle
ionice -c3 -p$$ 

# check that INIT is called
initialized=0

fatal ()
{
	echo $1
	echo -e "ERROR snapshot of $BACKUPED_HOST `date +%Y%m%d`\n$1" | MAIL
	exit 1
}



rotate_snapshots ()
{
  SD=$DEST_DIR/$SRC_HOST/snapshot
  for version in 000 001 002 003 004 005 010 015 020 025 030 060 090 120 150 180
    do [ -d $SD.$version ] || mkdir $SD.$version
  done

  echo Rotating snapshots
  #rotation every month
  if [ $(date "+%-d") -eq 27 ]; then
	  rm -rf $SD.180 &&\
      mv $SD.150 $SD.180 &&\
      mv $SD.120 $SD.150 &&\
      mv $SD.090 $SD.120 &&\
      mv $SD.060 $SD.090 &&\
      cp -al $SD.030 $SD.060
  fi
  
  #rotation every 5 days
  if [ $(($(date "+%-d")%5)) -eq 2 ]; then
	  rm -rf $SD.030 &&\
      mv $SD.025 $SD.030 &&\
      mv $SD.020 $SD.025 &&\
      mv $SD.015 $SD.020 &&\
      mv $SD.010 $SD.015 &&\
      cp -al $SD.005 $SD.010
  fi

  #rotation every day (one lauch per day)
  rm -rf $SD.005 &&\
  mv $SD.004 $SD.005 &&\
  mv $SD.003 $SD.004 &&\
  mv $SD.002 $SD.003 &&\
  mv $SD.001 $SD.002 &&\
  cp -al $SD.000 $SD.001

  if [ 0 -eq $? ] ; then
	  echo Rotation OK
  else
	  echo Error during snap rotation
	  exit 1
  fi
  snap_rotated=1
}

MAIL ()
{
  #mail -s "$MAIL_SUBJECT" "$MAIL_ADDRESS"
  echo 
}

test_remote_host ()
{
  SSH="ssh -x $1@$2"
  if [ "m$2" != "mlocalhost" ]; then
      $SSH -Y date
      ret=$?
      if [ 0 -eq $ret ] ; then
	  echo connection to $2 OK
      else
	  fatal "$0  : Error, server $2 unreachable"
      fi
  fi

}

INIT ()
{
  [ "m$DEST_DIR" == "m" ] && fatal "Please define DEST_DIR"
  [ "m$MAIL_ADDRESS" == "m" ] && fatal "Please define MAIL_ADDRESS"

  BACKUPED_HOST=$(basename $SNAPFILE .snapr)

  [ "m$SOURCE_HOST" == "m" ] && SOURCE_HOST=$BACKUPED_HOST
  MAIL_SUBJECT="[SNAP] backup $BACKUPED_HOST to $DEST_HOST (on $(hostname))"

  export ERRORFILE=/tmp/RSYNC-$SOURCE_HOST-ERROR
  [ -f  $ERRORFILE ] && rm -f $ERRORFILE 

  if [ "m$DEST_HOST" != "mlocalhost" ]; then
      fatal backup to distant host is not supported with this version
  else 
      [ -d $DEST_DIR ] || fatal "DEST_DIR $DEST_DIR doesnt exist"
      [ -d $DEST_DIR/$BACKUPED_HOST ] || mkdir -p $DEST_DIR/$BACKUPED_HOST
  fi

  if [ "m$SOURCE_HOST" == "mlocalhost" ]; then
      REMOTE_HOST=$DEST_HOST
      REMOTE_USER=$DEST_USER
      DEST=$REMOTE_USER@$REMOTE_HOST:$DEST_DIR/$BACKUPED_HOST/snapshot.000/
  else
      REMOTE_HOST=$SOURCE_HOST
      REMOTE_USER=$SOURCE_USER
      DEST=$DEST_DIR/$BACKUPED_HOST/snapshot.000/
  fi

  test_remote_host $REMOTE_USER $REMOTE_HOST
  echo "$(date "+%y%m%d-%H%M") Starting snapshot backup of $BACKUPED_HOST (on $(hostname))" | MAIL

  export ERRORFILE=/tmp/RSYNC-$BACKUPED_HOST-ERROR
  [ -f  $ERRORFILE ] && rm -f $ERRORFILE 

  rotate_snapshots
  initialized=1
}

RSYNC () {
  if [ $snap_rotated -ne 1 ] ; then
	  fatal "INIT has not been called"
  fi
  if [ $DRYRUN -ne 1 ] ; then
	  echo
	  echo "----------------------------------"
	  echo Running rsync $*
	  nice -n 19 rsync --perms --delete --max-delete=5000 \
          --chmod=u+rw,o-w -av -e "ssh -i /root/.ssh/id_dsa_backup-$BACKUPED_HOST" \
          $* 2>&1 | tee /tmp/$$-RSYNC-$BACKUPED_HOST         
          if [ ${PIPESTATUS[0]} -ne 0 ] ; then
                touch $ERRORFILE 
                echo -e "ERROR $(basename $0)  backuping $BACKUPED_HOST\nERROR rsync $* failed" | MAIL
                (echo $*;echo;cat  /tmp/$$-RSYNC-$BACKUPED_HOST ) | mail -s "Diagnotic snapshot pb" "$MAIL_ADDRESS"
          fi
	  rm -f /tmp/$$-RSYNC-$BACKUPED_HOST 
  else
	  echo Would run rsync $*
  fi  
}

function backup
{
    if [ $initialized -ne 1 ] ; then
	    INIT
    fi

    SOURCE=$1
    shift
    DEST_SUBDIR=$1
    shift 
    export OPTIONS=$*

    if [ "m$SOURCE_HOST" == "mlocalhost" ]; then
        SRC=$SOURCE
    else
        SRC=$REMOTE_USER@$REMOTE_HOST:$SOURCE
    fi

    echo
    echo "*** $(date "+%y%m%d-%H%M") Backuping $SRC to $DEST/$DEST_SUBDIR (on $(hostname))"
    echo
    RSYNC $OPTIONS $SOURCE $DEST/$DEST_SUBDIR 
}

source $SNAPFILE


#create snapshot list
rm -f $DEST/date
LC_ALL=C date > $DEST/date
cd $DEST_DIR/$BACKUPED_HOST
echo Snapshot list > snaplist.txt
for dir in $(find . -name snapshot\* -type d); do
  [ -r $dir/date ] && (echo "$(basename $dir) backup date : $(cat $dir/date)" >> snaplist.txt)
done
echo Snapshot list available here: $DEST_DIR/$BACKUPED_HOST/snaplist.txt

if [ ! -f "$ERRORFILE" ]; then
echo "Snapshot backup of $BACKUPED_HOST completed with no errors" | MAIL
else
echo "ERROR Snapshot backup of $BACKUPED_HOST completed WITH ERRORS" | MAIL
fi


#### MAIL
echo Sending mail
if [ ! -f "$ERRORFILE" ]; then
(
echo "  ------ $(date "+%y%m%d-%H%M") $(basename $0) $BACKUPED_HOST to $DEST (on $(hostname)) done------"
if [ "m$SOURCE_HOST" == "mlocalhost" ]; 
then
    $SSH "df -h $DEST_DIR"
else
    df -h $DEST_DIR
fi
) | MAIL
else
echo "$(date "+%y%m%d-%H%M") ERROR Snapshot backup of $BACKUPED_HOST (on $(hostname)) completed WITH ERRORS" | MAIL
fi
